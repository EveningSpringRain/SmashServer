// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtocol.proto

#include "GameProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace GameProtocol {
class C_Req_TestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C_Req_Test> _instance;
} _C_Req_Test_default_instance_;
class S_Ack_TestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S_Ack_Test> _instance;
} _S_Ack_Test_default_instance_;
}  // namespace GameProtocol
static void InitDefaultsscc_info_C_Req_Test_GameProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameProtocol::_C_Req_Test_default_instance_;
    new (ptr) ::GameProtocol::C_Req_Test();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C_Req_Test_GameProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C_Req_Test_GameProtocol_2eproto}, {}};

static void InitDefaultsscc_info_S_Ack_Test_GameProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameProtocol::_S_Ack_Test_default_instance_;
    new (ptr) ::GameProtocol::S_Ack_Test();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S_Ack_Test_GameProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S_Ack_Test_GameProtocol_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_GameProtocol_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_GameProtocol_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_GameProtocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_GameProtocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameProtocol::C_Req_Test, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameProtocol::C_Req_Test, test_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameProtocol::S_Ack_Test, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameProtocol::S_Ack_Test, test_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::GameProtocol::C_Req_Test)},
  { 6, -1, sizeof(::GameProtocol::S_Ack_Test)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameProtocol::_C_Req_Test_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameProtocol::_S_Ack_Test_default_instance_),
};

const char descriptor_table_protodef_GameProtocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022GameProtocol.proto\022\014GameProtocol\032\037goog"
  "le/protobuf/timestamp.proto\"\035\n\nC_Req_Tes"
  "t\022\017\n\007test_id\030\001 \001(\005\"\035\n\nS_Ack_Test\022\017\n\007test"
  "_id\030\001 \001(\005*\'\n\005MsgId\022\016\n\nC_REQ_TEST\020\000\022\016\n\nS_"
  "ACK_TEST\020\001B\033\252\002\030Google.Protobuf.Protocolb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_GameProtocol_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_GameProtocol_2eproto_sccs[2] = {
  &scc_info_C_Req_Test_GameProtocol_2eproto.base,
  &scc_info_S_Ack_Test_GameProtocol_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_GameProtocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameProtocol_2eproto = {
  false, false, descriptor_table_protodef_GameProtocol_2eproto, "GameProtocol.proto", 207,
  &descriptor_table_GameProtocol_2eproto_once, descriptor_table_GameProtocol_2eproto_sccs, descriptor_table_GameProtocol_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_GameProtocol_2eproto::offsets,
  file_level_metadata_GameProtocol_2eproto, 2, file_level_enum_descriptors_GameProtocol_2eproto, file_level_service_descriptors_GameProtocol_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_GameProtocol_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_GameProtocol_2eproto)), true);
namespace GameProtocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GameProtocol_2eproto);
  return file_level_enum_descriptors_GameProtocol_2eproto[0];
}
bool MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class C_Req_Test::_Internal {
 public:
};

C_Req_Test::C_Req_Test(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameProtocol.C_Req_Test)
}
C_Req_Test::C_Req_Test(const C_Req_Test& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_id_ = from.test_id_;
  // @@protoc_insertion_point(copy_constructor:GameProtocol.C_Req_Test)
}

void C_Req_Test::SharedCtor() {
  test_id_ = 0;
}

C_Req_Test::~C_Req_Test() {
  // @@protoc_insertion_point(destructor:GameProtocol.C_Req_Test)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Req_Test::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void C_Req_Test::ArenaDtor(void* object) {
  C_Req_Test* _this = reinterpret_cast< C_Req_Test* >(object);
  (void)_this;
}
void C_Req_Test::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Req_Test::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C_Req_Test& C_Req_Test::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C_Req_Test_GameProtocol_2eproto.base);
  return *internal_default_instance();
}


void C_Req_Test::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProtocol.C_Req_Test)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Req_Test::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 test_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          test_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Req_Test::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameProtocol.C_Req_Test)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 test_id = 1;
  if (this->test_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_test_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProtocol.C_Req_Test)
  return target;
}

size_t C_Req_Test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProtocol.C_Req_Test)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 test_id = 1;
  if (this->test_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_test_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Req_Test::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProtocol.C_Req_Test)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Req_Test* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Req_Test>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProtocol.C_Req_Test)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProtocol.C_Req_Test)
    MergeFrom(*source);
  }
}

void C_Req_Test::MergeFrom(const C_Req_Test& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProtocol.C_Req_Test)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.test_id() != 0) {
    _internal_set_test_id(from._internal_test_id());
  }
}

void C_Req_Test::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProtocol.C_Req_Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Req_Test::CopyFrom(const C_Req_Test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProtocol.C_Req_Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Req_Test::IsInitialized() const {
  return true;
}

void C_Req_Test::InternalSwap(C_Req_Test* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(test_id_, other->test_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Req_Test::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class S_Ack_Test::_Internal {
 public:
};

S_Ack_Test::S_Ack_Test(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameProtocol.S_Ack_Test)
}
S_Ack_Test::S_Ack_Test(const S_Ack_Test& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_id_ = from.test_id_;
  // @@protoc_insertion_point(copy_constructor:GameProtocol.S_Ack_Test)
}

void S_Ack_Test::SharedCtor() {
  test_id_ = 0;
}

S_Ack_Test::~S_Ack_Test() {
  // @@protoc_insertion_point(destructor:GameProtocol.S_Ack_Test)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Ack_Test::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void S_Ack_Test::ArenaDtor(void* object) {
  S_Ack_Test* _this = reinterpret_cast< S_Ack_Test* >(object);
  (void)_this;
}
void S_Ack_Test::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Ack_Test::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S_Ack_Test& S_Ack_Test::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S_Ack_Test_GameProtocol_2eproto.base);
  return *internal_default_instance();
}


void S_Ack_Test::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProtocol.S_Ack_Test)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Ack_Test::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 test_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          test_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Ack_Test::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameProtocol.S_Ack_Test)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 test_id = 1;
  if (this->test_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_test_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProtocol.S_Ack_Test)
  return target;
}

size_t S_Ack_Test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProtocol.S_Ack_Test)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 test_id = 1;
  if (this->test_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_test_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Ack_Test::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProtocol.S_Ack_Test)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Ack_Test* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Ack_Test>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProtocol.S_Ack_Test)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProtocol.S_Ack_Test)
    MergeFrom(*source);
  }
}

void S_Ack_Test::MergeFrom(const S_Ack_Test& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProtocol.S_Ack_Test)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.test_id() != 0) {
    _internal_set_test_id(from._internal_test_id());
  }
}

void S_Ack_Test::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProtocol.S_Ack_Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Ack_Test::CopyFrom(const S_Ack_Test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProtocol.S_Ack_Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Ack_Test::IsInitialized() const {
  return true;
}

void S_Ack_Test::InternalSwap(S_Ack_Test* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(test_id_, other->test_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Ack_Test::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace GameProtocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GameProtocol::C_Req_Test* Arena::CreateMaybeMessage< ::GameProtocol::C_Req_Test >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameProtocol::C_Req_Test >(arena);
}
template<> PROTOBUF_NOINLINE ::GameProtocol::S_Ack_Test* Arena::CreateMaybeMessage< ::GameProtocol::S_Ack_Test >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameProtocol::S_Ack_Test >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
