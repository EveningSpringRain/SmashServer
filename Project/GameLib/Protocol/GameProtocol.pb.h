// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameProtocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameProtocol_2eproto;
namespace GameProtocol {
class C_Req_Test;
class C_Req_TestDefaultTypeInternal;
extern C_Req_TestDefaultTypeInternal _C_Req_Test_default_instance_;
class S_Ack_Test;
class S_Ack_TestDefaultTypeInternal;
extern S_Ack_TestDefaultTypeInternal _S_Ack_Test_default_instance_;
}  // namespace GameProtocol
PROTOBUF_NAMESPACE_OPEN
template<> ::GameProtocol::C_Req_Test* Arena::CreateMaybeMessage<::GameProtocol::C_Req_Test>(Arena*);
template<> ::GameProtocol::S_Ack_Test* Arena::CreateMaybeMessage<::GameProtocol::S_Ack_Test>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace GameProtocol {

enum MsgId : int {
  C_REQ_TEST = 0,
  S_ACK_TEST = 1,
  MsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgId_IsValid(int value);
constexpr MsgId MsgId_MIN = C_REQ_TEST;
constexpr MsgId MsgId_MAX = S_ACK_TEST;
constexpr int MsgId_ARRAYSIZE = MsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgId_descriptor();
template<typename T>
inline const std::string& MsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgId_descriptor(), enum_t_value);
}
inline bool MsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgId>(
    MsgId_descriptor(), name, value);
}
// ===================================================================

class C_Req_Test PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameProtocol.C_Req_Test) */ {
 public:
  inline C_Req_Test() : C_Req_Test(nullptr) {}
  virtual ~C_Req_Test();

  C_Req_Test(const C_Req_Test& from);
  C_Req_Test(C_Req_Test&& from) noexcept
    : C_Req_Test() {
    *this = ::std::move(from);
  }

  inline C_Req_Test& operator=(const C_Req_Test& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Req_Test& operator=(C_Req_Test&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C_Req_Test& default_instance();

  static inline const C_Req_Test* internal_default_instance() {
    return reinterpret_cast<const C_Req_Test*>(
               &_C_Req_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_Req_Test& a, C_Req_Test& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Req_Test* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Req_Test* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_Req_Test* New() const final {
    return CreateMaybeMessage<C_Req_Test>(nullptr);
  }

  C_Req_Test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_Req_Test>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_Req_Test& from);
  void MergeFrom(const C_Req_Test& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Req_Test* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameProtocol.C_Req_Test";
  }
  protected:
  explicit C_Req_Test(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameProtocol_2eproto);
    return ::descriptor_table_GameProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestIdFieldNumber = 1,
  };
  // int32 test_id = 1;
  void clear_test_id();
  ::PROTOBUF_NAMESPACE_ID::int32 test_id() const;
  void set_test_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_test_id() const;
  void _internal_set_test_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GameProtocol.C_Req_Test)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 test_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameProtocol_2eproto;
};
// -------------------------------------------------------------------

class S_Ack_Test PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameProtocol.S_Ack_Test) */ {
 public:
  inline S_Ack_Test() : S_Ack_Test(nullptr) {}
  virtual ~S_Ack_Test();

  S_Ack_Test(const S_Ack_Test& from);
  S_Ack_Test(S_Ack_Test&& from) noexcept
    : S_Ack_Test() {
    *this = ::std::move(from);
  }

  inline S_Ack_Test& operator=(const S_Ack_Test& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Ack_Test& operator=(S_Ack_Test&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S_Ack_Test& default_instance();

  static inline const S_Ack_Test* internal_default_instance() {
    return reinterpret_cast<const S_Ack_Test*>(
               &_S_Ack_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_Ack_Test& a, S_Ack_Test& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Ack_Test* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Ack_Test* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_Ack_Test* New() const final {
    return CreateMaybeMessage<S_Ack_Test>(nullptr);
  }

  S_Ack_Test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_Ack_Test>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_Ack_Test& from);
  void MergeFrom(const S_Ack_Test& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Ack_Test* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameProtocol.S_Ack_Test";
  }
  protected:
  explicit S_Ack_Test(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameProtocol_2eproto);
    return ::descriptor_table_GameProtocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestIdFieldNumber = 1,
  };
  // int32 test_id = 1;
  void clear_test_id();
  ::PROTOBUF_NAMESPACE_ID::int32 test_id() const;
  void set_test_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_test_id() const;
  void _internal_set_test_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GameProtocol.S_Ack_Test)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 test_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameProtocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_Req_Test

// int32 test_id = 1;
inline void C_Req_Test::clear_test_id() {
  test_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_Req_Test::_internal_test_id() const {
  return test_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_Req_Test::test_id() const {
  // @@protoc_insertion_point(field_get:GameProtocol.C_Req_Test.test_id)
  return _internal_test_id();
}
inline void C_Req_Test::_internal_set_test_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  test_id_ = value;
}
inline void C_Req_Test::set_test_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_test_id(value);
  // @@protoc_insertion_point(field_set:GameProtocol.C_Req_Test.test_id)
}

// -------------------------------------------------------------------

// S_Ack_Test

// int32 test_id = 1;
inline void S_Ack_Test::clear_test_id() {
  test_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_Ack_Test::_internal_test_id() const {
  return test_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_Ack_Test::test_id() const {
  // @@protoc_insertion_point(field_get:GameProtocol.S_Ack_Test.test_id)
  return _internal_test_id();
}
inline void S_Ack_Test::_internal_set_test_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  test_id_ = value;
}
inline void S_Ack_Test::set_test_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_test_id(value);
  // @@protoc_insertion_point(field_set:GameProtocol.S_Ack_Test.test_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameProtocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::GameProtocol::MsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameProtocol::MsgId>() {
  return ::GameProtocol::MsgId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameProtocol_2eproto
